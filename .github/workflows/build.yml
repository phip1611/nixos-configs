name: Build

on: [ push, pull_request, merge_group ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  list-nixos-options-of-common-module:
    name: run "listNixosOptions" utility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - run: nix run .\#listNixosOptions

  nix-fmt:
    name: Check Nix formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - name: Check Nix formatting
        run: |
          echo "nix version: $(nix --version)"
          echo "nix fmt version: $(nix fmt -- --version)"

          set +e
          nix fmt

          # "nix fmt" doesn't has a convenient `--check` option, therefore we
          # use `git diff`
          git --no-pager diff

          # Report error, fail pipeline job
          set -e
          git --no-pager diff --quiet

  # Nix flake checks. This runs on GitHub infrastructure and not by remote
  # builder (hosted by Netcup), as there is no nested virtualization available.
  #
  # TODO make more fine-grained once https://github.com/NixOS/nix/issues/9629 is
  # solved.
  check:
    name: nix flake check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
        # Performs some basic checks of the NixOS system configurations and runs
        # all checks.
      - run: nix flake check

  # Builds all Nix packages, shells, and NixOS systems of the flake. This uses
  # my host at nix-binary-cache.phip1611.dev as CI remote builder as:
  # 1) The GitHub CI is relatively slow
  # 2) The volume quickly runs out of space in GitHub CI for large systems
  # 3) This way, the binary cache gets populated: CI builder <=> Nix binary cache.
  build_nixos:
    name: Checks, Shell, Packages, and Systems
    runs-on: ubuntu-latest
    env:
      # SSH port on asking-alexandria
      SSHOPTS: -p 7331
      SCPOPTS: -P 7331
      NIX_SSHOPTS: -p 7331
      CI_BUILDER_PRIV_KEY: ${{ secrets.CI_BUILDER_PRIV_KEY }}
      REMOTE_CI_PWD: /tmp/github-ci-run--${{ github.EVENT_NAME }}--${{ github.REF_TYPE }}--${{ github.RUN_ID }}--${{ github.RUN_ATTEMPT }}
    steps:
      - uses: actions/checkout@v5
        # Utilize the GitHub-specific local git repository so we do not have to
        # replicate any implementation details for the remote CI builder's
        # project checkout.
      - name: ZIP Git Checkout
        run: zip -r checkout.zip .
      - name: Prepare SSH key to access remote builder
        run: |
          # Configure private key stored in GitHub CI secret
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "$CI_BUILDER_PRIV_KEY" > ~/.ssh/key
          chmod 0600 ~/.ssh/key

          # Load SSH config into environment
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/key

          # Make SSH agent config persistent across CI steps. I ran
          # `echo $(ssh-agent -s)` to find out what is happening underneath
          # and which variables need to be exported.
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
      # Verify if remote host is reachable. This uses curl instead of a Ping,
      # as GitHub runners can't use `ping` by design. We check if the default
      # message from "nix-serve" is returned.
      - name: Check Remote Builder is available
        timeout-minutes: 1
        run: |
          DEFAULT_MSG="File not found."
          curl https://nix-binary-cache.phip1611.dev | grep -F "$DEFAULT_MSG"
      # Prevent "broken pipe" in long-running SSH sessions
      - name: Prepare Local SSH Config
        run: |
          echo 'ServerAliveInterval 30' | tee -a ~/.ssh/config
          echo 'ServerAliveCountMax 3' | tee -a ~/.ssh/config
      - name: Test SSH to Remote Builder works
        timeout-minutes: 1
        run: ssh -o StrictHostKeyChecking=accept-new ci-builder@nix-binary-cache.phip1611.dev "$SSHOPTS" "echo ssh works"
      - name: Checkout Repo on Remote Builder
        timeout-minutes: 1
        run: |
          echo "[GitHub CI] REMOTE_CI_PWD: $REMOTE_CI_PWD"

          echo "[GitHub CI] Create destination directory"
          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
            mkdir $REMOTE_CI_PWD
          EOF

          echo "[GitHub CI] Copy checkout.zip to destination"
          scp $SCPOPTS checkout.zip ci-builder@nix-binary-cache.phip1611.dev:/$REMOTE_CI_PWD

          echo "[GitHub CI] Unpack zip at destination directory"
          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
            set -euo pipefail
            cd $REMOTE_CI_PWD || exit 1

            nix-shell -p unzip --run "unzip checkout.zip"
            test -d .git
            test -f flake.nix
          EOF
      # Build all packages
      - name: "Flake: Build Packages"
        timeout-minutes: 60
        run: |
          echo "[GitHub CI] Building Packages on remote ..."
          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
            set -euo pipefail
            cd $REMOTE_CI_PWD || exit 1

            nix shell nixpkgs#jq --command bash -c "
              nix flake show --json 2>/dev/null \
                | jq -r '.packages.\"x86_64-linux\" | keys[]' \
                | xargs -I {} bash -c 'echo \"Building Package: {}\" && nix build .#{}'
            "
          EOF
      - name: "Flake: Build Bootitems"
        timeout-minutes: 60
        run: |
          echo "[GitHub CI] Building Bootitems on remote ..."
          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
           set -euo pipefail
           cd $REMOTE_CI_PWD || exit 1

           nix shell nixpkgs#jq --command bash -c "./build-all-bootitems.sh --ci"
          EOF
      - name: "Flake: Open Dev Shell"
        timeout-minutes: 60
        run: |
          echo "[GitHub CI] Building Dev Shell on remote ..."
          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
            set -euo pipefail
            cd $REMOTE_CI_PWD || exit 1

            nix develop . --command bash -c "echo it works"
          EOF
      # TODO reintroduce once there is nested virtualization support
      # - name: "Flake: Check"
      #  timeout-minutes: 60
      #  run: |
      #    echo "[GitHub CI] Building Flake Checks on remote ..."
      #    ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
      #      set -euo pipefail
      #      cd $REMOTE_CI_PWD || exit 1
      #
      #      nix flake check
      #    EOF
      - uses: ./.github/actions/build-nixos
        name: Build 'asking-alexandria'
        timeout-minutes: 60
        with:
          hostname: asking-alexandria
      - uses: ./.github/actions/build-nixos
        name: Build 'homepc'
        timeout-minutes: 60
        with:
          hostname: homepc
      - name: Cleanup on Remote Builder
        timeout-minutes: 1
        run: |
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/key

          ssh ci-builder@nix-binary-cache.phip1611.dev $SSHOPTS <<EOF
            echo "[Remote Builder] Removing $REMOTE_CI_PWD"
            rm -r "$REMOTE_CI_PWD"
          EOF
